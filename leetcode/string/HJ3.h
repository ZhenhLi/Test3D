/*
题目描述：
明明想在学校中请一些同学一起做一项问卷调查，为了实验的客观性，他先用计算机生成了N个1到1000之间的随机整数（N≤1000），对于其中重复的数字，只保留一个，把其余相同的数去掉，不同的数对应着不同的学生的学号。然后再把这些数从小到大排序，按照排好的顺序去找同学做调查。请你协助明明完成“去重”与“排序”的工作(同一个测试用例里可能会有多组数据(用于不同的调查)，希望大家能正确处理)。

注：测试用例保证输入参数的正确性，答题者无需验证。测试用例不止一组。

当没有新的输入时，说明输入结束。

输入描述：
注意：输入可能有多组数据(用于不同的调查)。每组数据都包括多行，第一行先输入随机整数的个数N，接下来的N行再输入相应个数的整数。具体格式请看下面的"示例"。

输出描述：
返回多行，处理后的结果

示例：
输入：

3 2 2 1 11 10 20 40 32 67 40 20 89 300 400 15

输出：

1 2 10 15 20 32 40 67 89 300 400

原文链接：https://blog.csdn.net/zhaitianbao/article/details/118795151
*/

// 思路： 输入内容分两种，先输入随机整数的个数N，再输入N个数，用双while可以实现输入；
//       然后要对输入的整数集合进行去重和排序，如果采用排序算法和去重算法进行，效率太低；
//       考虑用容器实现。先使用hashmap，建立hashmap后，出现过的整数则该键对应的值设为1，没出现过的自然为0，然后再遍历从1到1001，自然实现了排序；
//       也有人提出用set, set本身基于红黑树实现，插入有序且自动去重，非常适合该题目的解题。

#include <iostream>
#include <unordered_map>

namespace lc {

int fun_hj3() {
  int number, n;
  while (std::cin >> number) {
    std::unordered_map<int, int> a(1001);
    while(number--) {
      std::cin >> n;
      a[n] = 1;
    }
    for (int i = 0; i < 1001; i++) {
      if (a[i] == 1)
        std::cout << i << std::endl;
    }
  }

  return 0;
}

}